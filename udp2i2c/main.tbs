'=============================================
'SSI. object -- compare waveforms -- I2C mode
'=============================================


'MODE0: Clock defaults to LOW, DOUT changes on falling CLK edge, DIN latches on rising CLK edge
'         __    __
'CLK  ___|  |__|  |__
'     _______ _____ ___
'DOUT _b0____|_____|___
'
'DIN      |     |      (latch moments)



'MODE1: Clock defaults to LOW, DOUT changes on rising CLK edge, DIN latches on falling CLK edge
'         __    __
'CLK  ___|  |__|  |__
'     ____ _____ ___
'DOUT _x__|__b0_|__b1
'
'DIN         |     |   (latch moments)



'MODE2: Clock defaults to HIGH, DOUT changes on rising CLK edge, DIN latches on falling CLK edge
'     ___    __    __
'CLK     |__|  |__|
'     _______ _____ ___
'DOUT _b0____|_____|___
'
'DIN      |     |      (latch moments)



'MODE3: Clock defaults to HIGH, DOUT changes on falling CLK edge, DIN latches on rising CLK edge
'     ___    __    __
'CLK     |__|  |__|
'     ____ _____ ___
'DOUT _x__|__b0_|__b1
'
'DIN         |     |    (latch moments)


Const SCL=0
Const SDA=1
declare sub i2c_start()
declare sub i2c_stop()

'===============================================================
sub on_sys_init()
	io.num=SCL 'clock
	io.enabled=YES

	io.num=SDA 'data
	io.enabled=YES

	ssi.channel=0			'<=============================== set the right channel

	ssi.clkmap=SCL
	ssi.domap=SDA
	ssi.dimap=SDA

	ssi.mode=PL_SSI_MODE_3	'do not change
	ssi.baudrate=40
	ssi.direction=PL_SSI_DIRECTION_LEFT
	ssi.zmode=PL_SSI_ZMODE_ENABLED_ON_ZERO
	ssi.enabled=YES

	net.ip="192.168.1.223"
	sock.num=0
	sock.rxbuffrq(1)
	sys.buffalloc
	sock.protocol=PL_SOCK_PROTOCOL_UDP
	sock.localportlist="1000"
	sock.inconmode=PL_SOCK_INCONMODE_ANY_IP_ANY_PORT
	sock.reconmode=PL_SOCK_RECONMODE_1

end sub

sub on_sock_data_arrival()
	dim s as string=sock.getdata(255)
	sys.debugprint (s)
	sys.debugprint ("\n")

	i2c_start()
	ssi.str(s,PL_SSI_ACK_ALL_BUT_LAST)
	i2c_stop()
end sub

sub i2c_start()
	io.lineset(SCL,HIGH)
	io.num=SDA			'set SDA to HIGH first so we can have HIGH->LOW transition
	io.state=LOW		'we are manipulating data line through the OE register
	io.enabled=NO
	io.enabled=YES		'this will set the data output to LOW
end sub

sub i2c_stop()
	io.lineset(SCL,LOW)	'this will remove the ack bit
	io.num=SDA			'set SDA to LOW first so we can have LOW->HIGH transition
	io.state=LOW		'we are manipulating data line through the OE register
	io.enabled=YES
	io.lineset(SCL,HIGH)
	io.enabled=NO		'this will set the data output to HIGH
end sub
